// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Feedback {
  id           String  @id @default(cuid())
  feedback     String
  userId       String  @map("user_id")
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("feedbacks")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          String? @default("user")
  accounts      Account[]
  feedbacks     Feedback[]
  cart          Cart[]
  purhcase      Purchase[]
  @@map("users")
}

model Cart {
  id          String @id @default(cuid())
  facebook    String?
  description String?
  productId   String?
  quantity    String
  userId      String @map("user_id")
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product?  @relation(fields: [productId], references: [id])
  @@map("carts")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String
  price       String
  image       String
  category    String
  status      String @default("open")

  carts       Cart[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  @@map("products")
}

model Purchase {
  id          String      @id @default(cuid())
  cartTotal   String
  userId      String      
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  status      String      @default("To Do")
  new         Boolean     @default(true)
  transaction String     @default("pending")
  received    Boolean    @default(false)
  items       CartItem[] 
}

model CartItem {
  id          String   @id @default(cuid())
  name        String
  image       String
  quantity    String
  description String?
  facebook    String?
  price       String
  purchaseId  String   
  purchase    Purchase    @relation(fields: [purchaseId], references: [id])
}

model Quote {
  id         String  @id @default(cuid())
  name       String
  email      String
  type       String
  phone      String
  message    String
  createdAt  DateTime @default(now())
}

